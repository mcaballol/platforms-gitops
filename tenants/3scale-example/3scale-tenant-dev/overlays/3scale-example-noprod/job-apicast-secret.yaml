apiVersion: batch/v1
kind: Job
metadata:
  name: wait-and-generate-admin-url
  namespace: 3scale-tenant-dev  # Este es el namespace del Job, puede ser distinto al del Secret
  labels: 
    job: secret-generator
spec:
  template:
    spec:
      serviceAccountName: preset-sa  # AsegÃºrate que tenga permisos adecuados
      containers:
      - name: generator
        image: bitnami/kubectl:latest
        env:
        - name: SOURCE_SECRET
          value: dev-tenant-secret
        - name: TARGET_SECRET
          value: admin-access-url
        - name: SECRET_NAMESPACE
          value: 3scale-tenant-dev
        command:
        - /bin/bash
        - -c
        - |
          echo "[INFO] Esperando hasta 15 minutos a que aparezca el secret '${SOURCE_SECRET}' en el namespace '${SECRET_NAMESPACE}'..."
          TIMEOUT=900
          INTERVAL=10
          ELAPSED=0

          while [[ $ELAPSED -lt $TIMEOUT ]]; do
            if kubectl get secret "$SOURCE_SECRET" -n "$SECRET_NAMESPACE" >/dev/null 2>&1; then
              echo "[INFO] Secret encontrado tras $ELAPSED segundos."
              break
            fi
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          if [[ $ELAPSED -ge $TIMEOUT ]]; then
            echo "[ERROR] Tiempo agotado esperando el secret '${SOURCE_SECRET}'."
            exit 1
          fi
          TRACKING_ID=$(kubectl get job -l job=secret-generator  -n "$SECRET_NAMESPACE" -o jsonpath="{.items[0].metadata.annotations['argocd\.argoproj\.io/tracking-id']}")
          echo "$TRACKING_ID"
          APP_NAME=$(echo "$TRACKING_ID" | cut -d':' -f1)

          echo "[INFO] Leyendo y decodificando secret..."
          adminURL_b64=$(kubectl get secret "$SOURCE_SECRET" -n "$SECRET_NAMESPACE" -o jsonpath='{.data.adminURL}')
          token_b64=$(kubectl get secret "$SOURCE_SECRET" -n "$SECRET_NAMESPACE" -o jsonpath='{.data.token}')

          adminURL=$(echo "$adminURL_b64" | base64 -d)
          token=$(echo "$token_b64" | base64 -d)

          schema=$(echo "$adminURL" | cut -d':' -f1)
          domain=$(echo "$adminURL" | sed -E 's|^[a-z]+://||')

          new_url="${schema}://${token}@${domain}"
          echo "${new_url}"
          new_url_b64=$(echo -n "$new_url" | base64)

          echo "[INFO] Creando nuevo secret '${TARGET_SECRET}'..."

          kubectl create secret generic "$TARGET_SECRET" \
            --from-literal=adminAccessURL="$new_url" \
            -n "$SECRET_NAMESPACE" \
            --dry-run=client -o yaml \
            | kubectl apply -f -
          kubectl annotate secret "$TARGET_SECRET" "argocd.argoproj.io/tracking-id=${APP_NAME}:${SECRET_NAMESPACE}/Secret:${TARGET_SECRET}" --overwrite

          echo "[INFO] Secret '${TARGET_SECRET}' creado correctamente en namespace '${SECRET_NAMESPACE}'."
      restartPolicy: Never